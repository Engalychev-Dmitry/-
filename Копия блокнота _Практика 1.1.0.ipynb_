{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1fdDdDHaE4KNBgvMIfCjJ2U7NY_5A7bzr","timestamp":1732614738858}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**ФИО:**"],"metadata":{"id":"GEsFKJm-ABFp"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wZMLYG_G_-19"},"outputs":[],"source":["Енгалычев Дмитрий"]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"H4DrYnJjADuZ"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.\n","\n","\n","Отрабатываемый принцип: Наследование\n","\n"],"metadata":{"id":"C17FWep-AF4a"}},{"cell_type":"code","source":["\n","class Employee:\n","    def __init__(self,st_salary):\n","        self.st_salary = st_salary\n","        self.ratio = 1.2\n","\n","    def salary_count(self):\n","      return self.st_salary * self.ratio\n","\n","class Manager(Employee):\n","  def __init__(self,st_salary):\n","      super().__init__(st_salary)\n","      self.ratio = 1\n","\n","class Developer(Employee):\n","     def __init__(self,st_salary):\n","      super().__init__(st_salary)\n","      self.ratio = 0.8\n","\n","standart_salary = 80000\n","\n","employee = Employee(standart_salary)\n","print(f'Зарплата емплойера: {employee.salary_count()}')\n","\n","manager = Manager(standart_salary)\n","print(f'Зарплата менеджера : {manager.salary_count()}')\n","\n","developer = Developer(standart_salary)\n","print(f'Зарплата девелопера : {developer.salary_count()}')\n","\n"],"metadata":{"id":"aexGXzqCAFH7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732618301624,"user_tz":-300,"elapsed":234,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}},"outputId":"8e16eaf3-99c0-400a-806f-18c1e6e46968"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Зарплата емплойера: 96000.0\n","Зарплата менеджера : 80000\n","Зарплата девелопера : 64000.0\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ERAi0TG5BI6v"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.\n","\n","\n","Отрабатываемый принцип: Полиморфизм"],"metadata":{"id":"sJ3k7ZcgBK87"}},{"cell_type":"code","source":["class Vehicle:\n","    def __init__(self,description):\n","        self.description = description\n","\n","    def get_description(self):\n","        return self.description\n","\n","class Car(Vehicle):\n","    def __init__(self,brand, year,color,description):\n","        super().__init__(description)\n","        self.brand = brand\n","        self.year = year\n","        self.color = color\n","\n","    def get_description(self):\n","      return f\"{super().get_description()}\\nБрэнд: {self.brand}, Год: {self.year}, Цвет: {self.color}\"\n","\n","class Moto(Vehicle):\n","    def __init__(self,brand, year,color, description):\n","        super().__init__(description)\n","        self.brand = brand\n","        self.year = year\n","        self.color = color\n","\n","    def get_description(self):\n","      return f\"{super().get_description()}\\nБрэнд: {self.brand}, Год: {self.year}, Цвет: {self.color}\"\n","\n","class Bicycle(Vehicle):\n","    def __init__(self,brand, speed,color, description):\n","        super().__init__(description)\n","        self.brand = brand\n","        self.speed = speed\n","        self.color = color\n","\n","    def get_description(self):\n","      return f\"{super().get_description()}\\nБрэнд: {self.brand}, Количество скоростей: {self.speed}, Цвет: {self.color}\"\n","\n","car = Car('Audi',2024,'Black','Немецкий Автомобиль')\n","moto = Moto('Honda', 2024, 'Red','Китайский Мотоцикл')\n","bicycle = Bicycle('Steels', 21, 'Purple','Суперский Велосипед')\n","print(car.get_description())\n","print(moto.get_description())\n","print(bicycle.get_description())\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"WOFOZQmDBKf4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732622170854,"user_tz":-300,"elapsed":225,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}},"outputId":"2ca7bb23-5261-48b6-a875-5031efbb4e75"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Немецкий Автомобиль\n","Брэнд: Audi, Год: 2024, Цвет: Black\n","Китайский Мотоцикл\n","Брэнд: Honda, Год: 2024, Цвет: Red\n","Суперский Велосипед\n","Брэнд: Steels, Количество скоростей: 21, Цвет: Purple\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"7E_SJXMJBvD4"}},{"cell_type":"markdown","source":["Онлайн-магазин:\n","- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.\n","- Product включает информацию о цене, наличии на складе и категории товара.\n","Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.\n","- Customer управляет информацией о пользователе и его истории заказов.\n","- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.\n"],"metadata":{"id":"dd1mwKj_BxHa"}},{"cell_type":"code","source":["class Product:\n","    def __init__(self, name, price, quantity=0, category=None):\n","        self.name = name\n","        self.price = price\n","        self.quantity = quantity\n","        self.category = category\n","\n","    def ret(self):\n","        return f'Product({self.name}, {self.price}, {self.quantity}, {self.category})'\n","\n","class Order:\n","    def __init__(self, customer, products=[], discount=0, tax_rate=0):\n","        self.customer = customer\n","        self.products = products\n","        self.discount = discount\n","        self.tax_rate = tax_rate\n","\n","    def calculate_total_price(self):\n","        subtotal = sum(product.price * product.quantity for product in self.products)\n","        discount_amount = subtotal * self.discount / 100\n","        tax_amount = (subtotal - discount_amount) * self.tax_rate / 100\n","        return subtotal - discount_amount + tax_amount\n","\n","    def add_product(self, product):\n","        if product not in self.products:\n","            self.products.append(product)\n","\n","    def remove_product(self, product):\n","        if product in self.products:\n","            self.products.remove(product)\n","\n","    def update_quantity(self, product, new_quantity):\n","        if product in self.products:\n","            product.quantity = new_quantity\n","\n","    def __repr__(self):\n","        return f'Order({self.customer}, {self.products}, {self.calculate_total_price()})'\n","\n","class Customer:\n","    def __init__(self, name, email, address):\n","        self.name = name\n","        self.email = email\n","        self.address = address\n","        self.orders = []\n","\n","    def place_order(self, order):\n","        self.orders.append(order)\n","\n","    def get_total_spent(self):\n","        return sum(order.calculate_total_price() for order in self.orders)\n","\n","    def ret(self):\n","        return f'Customer({self.name}, {self.email}, {self.address})'\n","\n","class ShoppingCart:\n","    def __init__(self, customer):\n","        self.customer = customer\n","        self.items = {}\n","\n","    def add_item(self, product, quantity=1):\n","        if product in self.items:\n","            self.items[product] += quantity\n","        else:\n","            self.items[product] = quantity\n","\n","    def remove_item(self, product):\n","        if product in self.items:\n","            del self.items[product]\n","\n","    def update_quantity(self, product, new_quantity):\n","        if product in self.items:\n","            self.items[product] = new_quantity\n","\n","    def checkout(self, discount=0, tax_rate=0):\n","        products = list(self.items.keys())\n","        quantities = list(self.items.values())\n","        ...\n","\n","    def clear_cart(self):\n","        self.items = {}\n","\n","\n","\n","product1 = Product('Телефон', 500, 10, 'Электроника')\n","product2 = Product('Ноутбук', 1200, 5, 'Электроника')\n","\n","\n","customer = Customer('Вадим Серегевич', 'ivan@gmail.com', 'Москва')\n","\n","cart = ShoppingCart(customer)\n","\n","cart.add_item(product1, 2)\n","cart.add_item(product2, 1)\n","\n","\n","print(cart)\n"],"metadata":{"id":"wkCcv_K-Bwdv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732864942903,"user_tz":-300,"elapsed":216,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}},"outputId":"18555e3e-9850-413b-859e-2588a30e4280"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<__main__.ShoppingCart object at 0x7dcdb60b5810>\n"]}]},{"cell_type":"markdown","source":["# Задание 4"],"metadata":{"id":"ih7iPlYfB7lL"}},{"cell_type":"markdown","source":["Симулятор космического корабля:\n","- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.\n","- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.\n","- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).\n","- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами)."],"metadata":{"id":"zLwqVCbpCBvc"}},{"cell_type":"code","source":[],"metadata":{"id":"4NyrOOy8B9ED"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительно:"],"metadata":{"id":"F7mRVsZjCXk0"}},{"cell_type":"markdown","source":["**Описание:** создайте консольную версию игры крестики-нолики, используя классы"],"metadata":{"id":"X4Lkf86UCc1h"}},{"cell_type":"code","source":[],"metadata":{"id":"x9OxpNsyCcUo"},"execution_count":null,"outputs":[]}]}