{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1zZbU5QXY3ZEtfsKWHQC-JGRhxn7rwGmd","timestamp":1731404068713}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО"],"metadata":{"id":"8hJfL9b2l439"}},{"cell_type":"code","source":["Енгалычев Дмитрий Александрович"],"metadata":{"id":"wRnqvYOkl6EX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дисклеймер"],"metadata":{"id":"weOtPwPQmgpD"}},{"cell_type":"markdown","source":["В данной практике вам необходимо применить все ваши знания по темам:\n","\n","- Функции\n","- Словари\n","- Списки\n","- Множества\n","- Условные конструкции\n","- Запросы\n","\n","и все что было изучено на прошлых практических занятиях\n","\n","В каждом задании кратко описаны функции, которые необходимо реализовать, детали реализации вы должны продумать самостоятельно"],"metadata":{"id":"LznB3uscmjDa"}},{"cell_type":"markdown","source":["# Задание 0"],"metadata":{"id":"7nSJIqkTvC_C"}},{"cell_type":"markdown","source":["Создайте функцию по нахождению уникальных элементов из двух списков\n","\n","\n","\n","```\n","a = [1, 2, 3, 4]\n","b = [3, 4, 5, 6]\n","```\n","\n"],"metadata":{"id":"exACjTiVvGUe"}},{"cell_type":"code","source":["\n","a = [1, 2, 3, 4]\n","b = [3, 4, 5, 6]\n","\n","all_elements = b + a\n","\n","set_ = set(all_elements)\n","\n","print(set_)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6gAORbLruuvv","executionInfo":{"status":"ok","timestamp":1731756588079,"user_tz":-300,"elapsed":464,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}},"outputId":"ca1547c7-8591-44c0-f09c-610a77853426"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{1, 2, 3, 4, 5, 6}\n"]}]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"SVWNlBALpCNo"}},{"cell_type":"markdown","source":["Симулятор виртуального питомца\n","\n","Цель: создать виртуальный симулятор домашних животных, в котором пользователи смогут заводить питомцев и ухаживать за ними.\n","\n","Требования:\n","\n","- Функция для усыновления питомца (имя, тип, возраст).\n","- Функция для того, чтобы покормить питомца, поиграть с ним или уложить его спать.\n","- Функция для отображения состояния питомца (голод, радость, энергия)."],"metadata":{"id":"RcKA-VEqpC7f"}},{"cell_type":"code","source":["import random\n","from random import choice\n","\n","\n","pets = {}\n","# усыновление питомца\n","def adoption_pet():\n","    name = input('Введите имя питомца: ')\n","    parameter = {'type': input('Введите тип питомца: '),'old': input('Введите возраст питомца: ')}\n","    pets[name] = parameter\n","    return pets\n","\n","\n","# Взаимодействия с питомцем\n","def interaction_pets(name):\n","    print('\\nЧто вы хотите сделать?')\n","    print('1)Покормить')\n","    print('2)Поиграть')\n","    print('3)Погасить свет')\n","    command = int(input('Введите номер желаемого взаимодействия: '))\n","\n","    # Кормление\n","    if command == 1:\n","        print('В холодильнике лежат такие продукты как:')\n","        foods = ['Зерно','Мраморная говядина','Похлебка','Зелень']\n","        print(', '.join(foods))\n","        food = input(f'Чем вы хотите покормить питомца {name}? ')\n","        if food in foods:\n","            print(f'{name} сьел корм \"{foods[foods.index(food)]}\"')\n","            print('Что хотите сделать дальше?')\n","        else:\n","            print('Такая еда в холодильнике остутсвует.')\n","\n","    # Игра\n","    if command == 2:\n","      print('\\nВы решили поиграть с питомцем.')\n","      print('Вы будете играть в камень, ножницы, бумага')\n","      You = 0\n","      pets = 0\n","      list = ['камень', 'ножницы','бумага']\n","\n","      while You < 3 and pets < 3:\n","          i = input('Ваш ход: ')\n","          k = choice(list)\n","          print(\"Питомец:\" + str(k[0:]))\n","          if i == 'камень'and k == \"камень\":\n","              You += 0\n","              print('Ничья')\n","          if i == 'камень'and k == \"ножницы\":\n","              You += 1\n","              print('Победа : Игрок')\n","          if i == 'камень'and k == 'бумага':\n","              pets += 1\n","              print('Победа : Питомец')\n","          if i == 'ножницы' and k == 'камень':\n","              pets += 1\n","              print('Победа : Питомец')\n","          if i == 'ножницы' and k == 'ножницы':\n","              pets += 0\n","              print('Ничья')\n","          if i == 'ножницы' and k == 'бумага':\n","              You += 1\n","              print('Победа : Игрок')\n","          if i == 'бумага' and k == 'камень':\n","              You += 1\n","              print('Победа : Игрок')\n","          if i == 'бумага' and k == 'ножницы':\n","              pets += 1\n","              print('Победа : Питомец')\n","          if i == 'бумага' and k == 'бумага':\n","              pets += 0\n","              print('Ничья')\n","          if You == 3:\n","              print('ИГРОК ПОБЕДИЛ!')\n","              print('Что хотите сделать дальше?')\n","          if pets == 3:\n","              print('ПИТОМЕЦ ПОБЕДИЛ!')\n","              print('Что хотите сделать дальше?')\n","\n","    # Спатеньки\n","    if command == 3:\n","        print('\\nВаш питомец заснул')\n","        print('Что хотите сделать дальше?')\n","\n","\n","# Состояние питомца\n","def status_pets(name):\n","    if name in pets.keys():\n","        status = {'hunger': int(random.random() * 100), 'joy': int(random.random() * 100), 'energy': int(random.random() * 100) }\n","        print(f'Голод: {status[\"hunger\"]}, Радость: {status[\"joy\"]}, Энергния: {status[\"energy\"]}')\n","        return status\n","    else:\n","        print('Такого питомца нету в пуле')\n","\n","# Головная функция\n","def main():\n","    print('Добрый день вы попали вы попали в игру \"Симулятор виртуального питомца\".')\n","    print('\\nМеню: ')\n","    print('1)Усыновить питомца')\n","    print('2)Повзаимодействовать с питомцем')\n","    print('3)Состояние питомца')\n","    print('4)Выйти из игры')\n","\n","    while True:\n","        query = int(input('\\nВведите номер комманды: '))\n","        if query == 1:\n","            adoption_pet()\n","        elif query == 2:\n","            name = input('С каким питомцем хотите повзаимодействовать? ')\n","            if name in pets:\n","                interaction_pets(name)\n","            else:\n","                print('Такого питомца нет.')\n","        elif query == 3:\n","            name = input('Состояние какого питомца хотите узнать?: ')\n","            if name in pets:\n","                status_pets(name)\n","            else:\n","                print('Такого питомца нет.')\n","        elif query == 4:\n","            break\n","        else:\n","            print(\"Неверная опция. Пожалуйста, попробуйте снова.\")\n","\n","\n","\n","main()\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"hE7mF-HXpJLO","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1731411208758,"user_tz":-300,"elapsed":103125,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}},"outputId":"dd26e24b-9d96-4432-8456-5e58874e6c63"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Добрый день вы попали вы попали в игру \"Симулятор виртуального питомца\".\n","\n","Меню: \n","1)Усыновить питомца\n","2)Повзаимодействовать с питомцем\n","3)Состояние питомца\n","4)Выйти из игры\n","\n","Введите номер комманды: 1\n","Введите имя питомца: u\n","Введите тип питомца: g\n","Введите возраст питомца: 13\n","\n","Введите номер комманды: 2\n","С каким питомцем хотите повзаимодействовать? u\n","\n","Что вы хотите сделать?\n","1)Покормить\n","2)Поиграть\n","3)Погасить свет\n","Введите номер желаемого взаимодействия: 2\n","\n","Вы решили поиграть с питомцем.\n","Вы будете играть в камень, ножницы, бумага\n","Ваш ход: бумага\n","Питомец:бумага\n","Ничья\n","Ваш ход: камень\n","Питомец:камень\n","Ничья\n","Ваш ход: камень\n","Питомец:бумага\n","Победа : Питомец\n","Ваш ход: камень\n","Питомец:бумага\n","Победа : Питомец\n","Ваш ход: камень\n","Питомец:бумага\n","Победа : Питомец\n","ПИТОМЕЦ ПОБЕДИЛ!\n","Что хотите сделать дальше?\n","\n","Введите номер комманды: 3\n","Какого питомца хотите уложить спать?: u\n","Голод: 86, Радость: 18, Энергния: 60\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-39-ae1b179d096a>\u001b[0m in \u001b[0;36m<cell line: 122>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    120\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    121\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 122\u001b[0;31m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-39-ae1b179d096a>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     98\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     99\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 100\u001b[0;31m         \u001b[0mquery\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\nВведите номер комманды: '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    101\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mquery\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    102\u001b[0m             \u001b[0madoption_pet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"qZ7qFQnmssNd"}},{"cell_type":"markdown","source":["Рыцарь и дракон\n","\n","Цель: создать небольшую игру, в которой вам необходимо играть за рыцаря и сразиться с драконом\n","\n","Требования:\n","\n","- Создание персонажа (имя, информация о доспехах, оружии, урон, здоровье)\n","- Управление персонажем и мини сюжет\n","- Создание дракона (Имя, информация о здоровье и уроне)\n","- Боевая система (нанесение и получение урона, урон должен быть случайным в заданном диапазоне)\n","- Реализовать бой между драконом и рыцарем"],"metadata":{"id":"UaccTe7ltNvg"}},{"cell_type":"code","source":["import random\n","\n","\n","def create_knight():\n","    knight = {}\n","    knight['name'] = input(\"Введите имя рыцаря: \")\n","    knight['armor'] = int(input(\"Введите уровень доспехов (0-5): \"))\n","    knight['weapon'] = input(\"Введите название оружия: \")\n","    knight['damage'] = int(input(\"Введите урон от оружия (5-15): \"))\n","    knight['health'] = int(input(\"Введите здоровье (20-100): \"))\n","    return knight\n","\n","\n","def create_dragon():\n","    dragon = {}\n","    dragon['name'] = \"Дракон\"\n","    dragon['armor'] = random.randint(0, 3)\n","    dragon['damage'] = random.randint(10, 20)\n","    dragon['health'] = random.randint(50, 100)\n","    return dragon\n","\n","\n","def attack(attacker, defender):\n","    # Случайный урон в диапазоне от -2 до +2\n","    actual_damage = random.randint(attacker['damage'] - 2, attacker['damage'] + 2)\n","    effective_damage = max(0, actual_damage - defender['armor'])\n","    defender['health'] -= effective_damage\n","    print(f\"{attacker['name']} наносит {effective_damage} урона по {defender['name']}! Осталось здоровья: {defender['health']}\")\n","\n","def is_alive(character):\n","    return character['health'] > 0\n","\n","\n","def battle(knight, dragon):\n","    print(f\"\\n{knight['name']} сражается с {dragon['name']}!\")\n","    while is_alive(knight) and is_alive(dragon):\n","        attack(knight, dragon)\n","        if is_alive(dragon):\n","            attack(dragon, knight)\n","        print()\n","\n","    if is_alive(knight):\n","        print(f\"{knight['name']} победил {dragon['name']}!\")\n","    else:\n","        print(f\"{dragon['name']} победил {knight['name']}!\")\n","\n","\n","def main():\n","    print(\"Добро пожаловать в игру 'Рыцарь и Дракон'!\")\n","    print('В королевстве Лунария настали тревожные времена. Древний дракон')\n","    print('Charmander, пробудившись от долгого сна на горе Pokeland, начал опустошать')\n","    print('окрестные деревни своим огненным дыханием. Люди в панике бегут из своих домов.')\n","    print('Король Лунарии объявляет награду тому, кто сможет остановить Charmander и вернуть мир')\n","    print('в королевство. Вы, смелый рыцарь, решаете принять вызов. Собрав свои доспехи и оружие, ')\n","    print('вы отправляетесь в опасное путешествие к горе Pokeland.')\n","    print('Смелость и решительность будут вашими лучшими союзниками в этой битве.')\n","    print('Готовьтесь, рыцарь, ваша судьба и судьба королевства теперь в ваших руках!')\n","    knight = create_knight()\n","    dragon = create_dragon()\n","    battle(knight, dragon)\n","\n","\n","main()"],"metadata":{"id":"LCcxp5Q0srjY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 3\n"],"metadata":{"id":"N8oFiEXol3e2"}},{"cell_type":"markdown","source":["Цель - создать менеджера команды Pokémon, который позволит пользователям:\n","\n","- Добавлять покемонов в свою команду. (если такого покемона еще нет в команде)\n","- Удалять покемонов из их команды.\n","- Просматривать подробную информацию обо всех покемонах в команде.\n","- Находить покемона по имени.\n","- Устраивать тренировочный бой между двумя покемонами\n","\n","Для данной задачи используйте: https://pokeapi.co/\n"],"metadata":{"id":"9p4WQG_Vl7wB"}},{"cell_type":"code","source":["\n"],"metadata":{"id":"NnGYp1MTqi5k"},"execution_count":null,"outputs":[]}]}