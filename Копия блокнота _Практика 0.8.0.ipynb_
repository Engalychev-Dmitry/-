{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"17IcY1UTGzZMUteC1w_OLi1DXlUbhQRJu","timestamp":1730799033581}],"collapsed_sections":["QGrsZrv5U1s8"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"ra45s33wUt-C"}},{"cell_type":"markdown","source":["Задача: Создать чат бота для получения информации об исследованиях космоса\n","\n","Описание: Создайте комплексное приложение командной строки, которое будет использоваться в качестве панели управления исследованиями космоса. Данное приложение будет обращаться к https://api.nasa.gov/ для предоставления пользователям набора информации о космосе, включая:\n","\n","- Астрономическая картинка дня (APOD): Отображение APOD с пояснениями к нему.\n","- Фотографии с марсохода: позволяет пользователям выбирать и фильтровать фотографии с марсохода по дате и типу камеры.\n","- Объекты, сближающиеся с Землей (ОСЗ): Поиск и отображение информации об объекте, сближающихся с Землей, на определенную дату, включая их размеры и потенциальную опасность.\n","- Данные о космической погоде: Отображают последние данные о космической погоде, включая солнечные вспышки и геомагнитные бури.\n","Приложение должно позволять пользователям ориентироваться в этих функциях, корректно обрабатывать ошибки и обеспечивать удобство работы.\n","\n","Требования:\n","- Пользовательский ввод: Приложение должно предложить пользователю ввести данные, чтобы выбрать, какую функцию он хочет изучить.\n","- Проверка данных: Убедитесь, что пользовательские данные (например, даты) проверены.\n","- Обработка ошибок: Корректно обрабатывайте ошибки API и неверные ответы.\n","- Представление данных: Представляйте данные в четкой и организованной форме.\n","- Опция выхода: позволяет пользователям выходить из приложения в любое время."],"metadata":{"id":"G56D5mNCUwp5"}},{"cell_type":"code","source":["pip install requests\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":111},"id":"Yqqj2c4xroit","executionInfo":{"status":"error","timestamp":1730804284782,"user_tz":-300,"elapsed":329,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}},"outputId":"61976ed9-cfa1-4d74-aabb-76ea66dc3050"},"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-12-3407effee77a>, line 1)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-12-3407effee77a>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    pip install requests\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wGeJM9n4UqUD","colab":{"base_uri":"https://localhost:8080/","height":914},"executionInfo":{"status":"error","timestamp":1731052141127,"user_tz":-300,"elapsed":242082,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}},"outputId":"61aa7237-bffd-477c-8555-a1d71cd9e61d"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Панель управления исследованиями космоса NASA\n","1. Получить астрономическую картинку дня (APOD)\n","2. Получить фотографии с марсохода\n","3. Получить объекты, сближающиеся с Землей (ОСЗ)\n","4. Получить данные о космической погоде\n","5. Выход\n","Пожалуйста, выберите опцию (1-5): 1\n","Название: Helping Hand in Cassiopeia\n","Дата: 2024-11-08\n","Описание: Drifting near the plane of our Milky Way galaxy these dusty molecular clouds seem to extend a helping hand on a cosmic scale. Part of a local complex of star-forming interstellar clouds they include LDN 1358, 1357, and 1355 from American astronomer Beverly Lynds' 1962 Catalog of Dark Nebulae. Presenting a challenging target for astro-imagers, the obscuring dark nebulae are nearly 3,000 light-years away, toward rich starfields in the northern constellation Cassiopeia. At that distance, this deep, telescopic field of view would span about 80 light-years.\n","URL изображения: https://apod.nasa.gov/apod/image/2411/Ldn1355HelpingHandFR1024.png\n","\n","Панель управления исследованиями космоса NASA\n","1. Получить астрономическую картинку дня (APOD)\n","2. Получить фотографии с марсохода\n","3. Получить объекты, сближающиеся с Землей (ОСЗ)\n","4. Получить данные о космической погоде\n","5. Выход\n","Пожалуйста, выберите опцию (1-5): 2\n","Введите дату Sol (Марсианская дата): 100\n","Введите тип камеры (например, 'FHAZ', 'RHAZ'): FHAZ\n","ID фотографии: 669, URL изображения: http://mars.jpl.nasa.gov/msl-raw-images/proj/msl/redops/ods/surface/sol/00100/opgs/edr/fcam/FRA_406374643EDR_F0050178FHAZ00301M_.JPG\n","ID фотографии: 9487, URL изображения: http://mars.jpl.nasa.gov/msl-raw-images/proj/msl/redops/ods/surface/sol/00100/opgs/edr/fcam/FLA_406377515EDR_F0050178FHAZ00302M_.JPG\n","ID фотографии: 9488, URL изображения: http://mars.jpl.nasa.gov/msl-raw-images/proj/msl/redops/ods/surface/sol/00100/opgs/edr/fcam/FRA_406377515EDR_F0050178FHAZ00302M_.JPG\n","ID фотографии: 9489, URL изображения: http://mars.jpl.nasa.gov/msl-raw-images/proj/msl/redops/ods/surface/sol/00100/opgs/edr/fcam/FLA_406374643EDR_F0050178FHAZ00301M_.JPG\n","\n","Панель управления исследованиями космоса NASA\n","1. Получить астрономическую картинку дня (APOD)\n","2. Получить фотографии с марсохода\n","3. Получить объекты, сближающиеся с Землей (ОСЗ)\n","4. Получить данные о космической погоде\n","5. Выход\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-03b6149b0317>\u001b[0m in \u001b[0;36m<cell line: 95>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     94\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-2-03b6149b0317>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     73\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"5. Выход\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 75\u001b[0;31m         \u001b[0mchoice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Пожалуйста, выберите опцию (1-5): \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mchoice\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'1'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}],"source":["import requests\n","import json\n","from datetime import datetime\n","\n","\n","\n","\n","API_KEY = 'qLI8e0T3D0JMlNfMMNvRO94rCBdfbCpDaEWoA4PC'\n","\n","# apod\n","def get_apod():\n","    url = f\"https://api.nasa.gov/planetary/apod?api_key={API_KEY}\"\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        data = response.json()\n","        print(f\"Название: {data['title']}\")\n","        print(f\"Дата: {data['date']}\")\n","        print(f\"Описание: {data['explanation']}\")\n","        print(f\"URL изображения: {data['url']}\")\n","    else:\n","        print(\"Ошибка при получении APOD:\", response.status_code)\n","\n","# марсоход фотки\n","def get_mars_photos(sol, camera):\n","    url = f\"https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol={sol}&camera={camera}&api_key={API_KEY}\"\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        data = response.json()\n","        if data['photos']:\n","            for photo in data['photos']:\n","                print(f\"ID фотографии: {photo['id']}, URL изображения: {photo['img_src']}\")\n","        else:\n","            print(\"Фотографии не найдены для указанных параметров.\")\n","    else:\n","        print(\"Ошибка при получении фотографий с Марса:\", response.status_code)\n","\n","# ОСЗ\n","def get_near_earth_objects(date):\n","    url = f\"https://api.nasa.gov/neo/rest/v1/feed?start_date={date}&end_date={date}&api_key={API_KEY}\"\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        data = response.json()\n","        if data['near_earth_objects'][date]:\n","            for obj in data['near_earth_objects'][date]:\n","                print(f\"Название: {obj['name']}, Размер: {obj['estimated_diameter']['meters']['estimated_diameter_max']} м, Потенциально опасный: {obj['is_potentially_hazardous_asteroid']}\")\n","        else:\n","            print(\"На указанную дату объекты не обнаружены.\")\n","    else:\n","        print(\"Ошибка при получении данных об ОСЗ:\", response.status_code)\n","\n","# Космическая погода\n","def get_space_weather():\n","    url = f\"https://api.nasa.gov/DONKI/CME?startDate={datetime.now().strftime('%Y-%m-%d')}&endDate={datetime.now().strftime('%Y-%m-%d')}&api_key={API_KEY}\"\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        data = response.json()\n","        if data:\n","            for event in data:\n","                print(f\"Событие: {event['activity_id']}, Дата: {event['startTime']}\")\n","        else:\n","            print(\"На текущую дату данные о космической погоде отсутствуют.\")\n","    else:\n","        print(\"Ошибка при получении данных о космической погоде:\", response.status_code)\n","\n","\n","def main():\n","    while True:\n","        print(\"\\nПанель управления исследованиями космоса NASA\")\n","        print(\"1. Получить астрономическую картинку дня (APOD)\")\n","        print(\"2. Получить фотографии с марсохода\")\n","        print(\"3. Получить объекты, сближающиеся с Землей (ОСЗ)\")\n","        print(\"4. Получить данные о космической погоде\")\n","        print(\"5. Выход\")\n","\n","        choice = input(\"Пожалуйста, выберите опцию (1-5): \")\n","\n","        if choice == '1':\n","            get_apod()\n","        elif choice == '2':\n","            sol = input(\"Введите дату Sol (Марсианская дата): \")\n","            camera = input(\"Введите тип камеры (например, 'FHAZ', 'RHAZ'): \")\n","            get_mars_photos(sol, camera)\n","        elif choice == '3':\n","            date = input(\"Введите дату (YYYY-MM-DD): \")\n","            get_near_earth_objects(date)\n","        elif choice == '4':\n","            get_space_weather()\n","        elif choice == '5':\n","            print(\"Выход из программы.\")\n","            break\n","        else:\n","            print(\"Неверная опция. Пожалуйста, попробуйте снова.\")\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ia9UtA0cU1Iy"}},{"cell_type":"markdown","source":["Описание задачи\n","\n","Цель этой задачи - создать скрипт на Python, который взаимодействует с API Чикагского института искусств (https://api.artic.edu/docs/) для извлечения и отображения произведений искусства. Скрипт должен позволять пользователям просматривать работы по страницам, фильтровать их по имени художника и просматривать подробную информацию о выбранных произведениях искусства. Ниже приведены требования и функциональные возможности, которые необходимо реализовать:\n","\n","Требования:\n","Извлекать произведения искусства:\n","\n","- Создайте функцию, которая извлекает список произведений искусства из API Чикагского института искусств.\n","Функция должна принимать параметр page для разбивки на страницы и возвращать список произведений искусства вместе с информацией о разбивке на страницы.\n","Фильтровать произведения искусства:\n","\n","- Реализуйте функцию, которая фильтрует список произведений искусства на основе имени указанного художника. Функция должна возвращать список работ, которые соответствуют имени художника (без учета регистра).\n","Отображать подробную информацию об оформлении:\n","\n","- Напишите функцию, которая отображает названия работ для пользователя и позволяет ему выбрать одну из них, введя соответствующий номер.\n","После выбора функция должна отображать подробную информацию о выбранном произведении, включая название, исполнителя, дату и носитель.\n","Разбивка на страницы и взаимодействие с пользователем:\n","\n","- Создайте основную функцию, которая управляет выборкой произведений и взаимодействием с пользователем.\n","\n","Разрешите пользователям перемещаться по страницам с произведениями искусства, выполнять фильтрацию по исполнителю или выходить из программы.\n","\n","Если страниц с произведениями искусства несколько, укажите варианты перехода к следующей странице, предыдущей странице, фильтрации по исполнителю или выхода из программы."],"metadata":{"id":"Ofu_GmqrU1Iy"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"jjUH1GznU1Iy"},"outputs":[],"source":["import requests\n","\n","\n","\n","\n","BASE_URL = \"https://api.artic.edu/api/v1/artworks\"\n","\n","\n","def get_artworks(page=1):\n","    response = requests.get(f\"{BASE_URL}?page={page}&limit=10\")\n","    if response.status_code == 200:\n","        data = response.json()\n","        return data['data'], data['pagination']\n","    else:\n","        print(\"Ошибка при получении произведений искусства:\", response.status_code)\n","        return [], None\n","\n","# Фильтрует список произведений искусства по имени художника\n","def filter_artworks_by_artist(artworks, artist_name):\n","    filtered_artworks = [art for art in artworks if artist_name.lower() in art['artist_title'].lower()]\n","    return filtered_artworks\n","\n","# Отображает подробную информацию о произведении искусства\n","def display_artwork_details(artwork):\n","    print(f\"\\nНазвание: {artwork['title']}\")\n","    print(f\"Исполнитель: {artwork['artist_title']}\")\n","    print(f\"Дата: {artwork['date_display']}\")\n","    print(f\"Носитель: {artwork['medium_display']}\")\n","    print(f\"Дополнительная информация: {artwork['id']}\")\n","\n","\n","def main():\n","    page = 1\n","    while True:\n","        artworks, pagination = get_artworks(page)\n","        if not artworks:\n","            print(\"Не удалось получить произведения искусства.\")\n","            break\n","\n","        print(\"\\nПроизведения искусства:\")\n","        for i, artwork in enumerate(artworks):\n","            print(f\"{i + 1}. {artwork['title']} (Исполнитель: {artwork['artist_title']})\")\n","\n","        print(\"\\nДоступные действия:\")\n","        print(\"1. Просмотреть подробную информацию о произведении\")\n","        print(\"2. Фильтровать по имени художника\")\n","        print(\"3. Перейти на следующую страницу\" if pagination['next_url'] else \"3. Следующая страница недоступна\")\n","        print(\"4. Перейти на предыдущую страницу\" if pagination['prev_url'] else \"4. Предыдущая страница недоступна\")\n","        print(\"5. Выход\")\n","\n","        choice = input(\"Выберите опцию (1-5): \")\n","\n","        if choice == '1':\n","            artwork_choice = int(input(\"Введите номер произведения для просмотра подробной информации: \")) - 1\n","            if 0 <= artwork_choice < len(artworks):\n","                display_artwork_details(artworks[artwork_choice])\n","            else:\n","                print(\"Неверный номер произведения.\")\n","        elif choice == '2':\n","            artist_name = input(\"Введите имя художника для фильтрации: \")\n","            filtered_artworks = filter_artworks_by_artist(artworks, artist_name)\n","            if filtered_artworks:\n","                print(\"\\nОтфильтрованные произведения искусства:\")\n","                for i, artwork in enumerate(filtered_artworks):\n","                    print(f\"{i + 1}. {artwork['title']} (Исполнитель: {artwork['artist_title']})\")\n","            else:\n","                print(\"Произведения искусства не найдены для указанного художника.\")\n","        elif choice == '3' and pagination['next_url']:\n","            page += 1\n","        elif choice == '4' and pagination['prev_url']:\n","            page -= 1\n","        elif choice == '5':\n","            print(\"Выход из программы.\")\n","            break\n","        else:\n","            print(\"Неверный выбор или действие недоступно.\")\n","\n","\n","if __name__ == \"__main__\":\n","    main()"]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"eecUb-akU1ji"}},{"cell_type":"markdown","source":["Задача: Создать программу по управлению портфелем криптовалют\n","\n","Цель: Создать скрипт на Python, который извлекает цены на криптовалюты в режиме реального времени, позволяет пользователям управлять портфелем криптовалют, вычисляет общую стоимость портфеля, отслеживает изменения цен и предоставляет исторические данные о ценах для анализа.\n","\n","Требования:\n","Получение текущих цен на криптовалюты:\n","\n","Используйте https://docs.coingecko.com/ для получения актуальных цен на список криптовалют.\n","\n","Управление портфелем:\n","\n","- Позволяет пользователю создавать портфель криптовалют и управлять им, указывая количество каждой криптовалюты, которой он владеет.\n","- Расчитывает общую стоимость портфеля в указанной фиатной валюте (например, долларах США).\n","\n","Отслеживание изменения цен:\n","\n","- Отображение процентного изменения цены для каждой криптовалюты в портфеле за последние 24 часа.\n","- Выделите все криптовалюты, стоимость которых значительно увеличилась или снизилась.\n","\n","Поиск исторических данных о ценах:\n","\n","- Получение исторических данных о ценах на указанную криптовалюту за последнюю неделю.\n","- Предоставьте пользователю возможность визуализировать эти данные в простом текстовом формате (например, цены за день).\n","\n","Взаимодействие с пользователем:\n","\n","- Реализуйте интерфейс командной строки для ввода данных пользователем.\n","- Предоставьте опции для получения текущих цен, управления портфелем, просмотра изменений цен или анализа исторических данных.\n"],"metadata":{"id":"jsK7IKptU1ji"}},{"cell_type":"code","source":[],"metadata":{"id":"_0DToTqlvywa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительно: Задание 4"],"metadata":{"id":"QGrsZrv5U1s8"}},{"cell_type":"markdown","source":["Задание 4: Проектное\n","\n","Вам необходимо самостоятельно найти откртое API предоставляющее информацию в открытом доступе и реализовать собственный проект!\n","\n","\n","Критерии приемки результата:\n","\n","- Проект включает в себя не менее 5 возможостей для пользователя\n","- Проект позволяет использовать все возможности проекта пользователю при помощи взаимодействия через коммандную строку\n","- Проект работает с открытым API (это значит что при проверке вашей работы преподавателем, преподавателю необходимо просто запустить ячейку с кодом вашего проекта и она будет работать без дополнительных манипуляции)\n","- Проект должен обязательно включать в себя ряд используемых конструкции:\n","    - Функции\n","    - Условные конструкции\n","    - Ввод/вывод\n","    - Словари/Списки\n","- Допускается использование библиотек:\n","    - requests\n","    - datetime\n","    - random"],"metadata":{"id":"qs_XITmYU1s8"}},{"cell_type":"markdown","source":["**Здесь добавьте описание вашего проекта**"],"metadata":{"id":"VKXhaJi4FL0B"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wiA55k1KU1s8"},"outputs":[],"source":["#  А здесь код"]}]}