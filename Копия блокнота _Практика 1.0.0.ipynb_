{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1M-O_KUCtKLJnPKgWsQQu9bkGfa2vOHnO","timestamp":1732352455722}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"fLDS5f_mCnPa"}},{"cell_type":"markdown","source":["# Задание (совместное с преподавателем)\n","\n","\n"],"metadata":{"id":"-CSHUbWzCqeM"}},{"cell_type":"markdown","source":["Напишите систему для учёта отпусков с возможностью узнавать, сколько дней отпуска осталось у того или иного сотрудника.\n","Для этого создайте класс Employee со следующими методами:\n","\n","- Метод consume_vacation должен отвечать за списание дней отпуска.\n","\n","Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).\n","\n","При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.\n","\n","Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра |, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.\n","\n","- Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: ```Остаток отпускных дней: <число>.```\n","\n","\n","Чтобы проверить работу программы:\n","1. Создайте экземпляр класса Employee.\n","2. Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.\n","3. Вызовите метод get_vacation_details."],"metadata":{"id":"a_flBjZOCwYz"}},{"cell_type":"code","source":["class Employee:\n","    vacation_days = 28  #колво отпускных дней\n","\n","    def __init__(self, first_name, last_name):\n","        self.first_name = first_name\n","        self.last_name = last_name\n","        self._remaining_vacation_days = self.vacation_days\n","\n","    def consume_vacation(self, days):\n","        if days > 0:\n","            self._remaining_vacation_days -= days\n","        else:\n","            raise ValueError(\"Количество дней отпуска должно быть больше нуля.\")\n","\n","    def get_vacation_details(self):\n","        return f\"Остаток отпускных дней: {self._remaining_vacation_days}\"\n","\n","\n","\n","vadim = Employee(\"Vadim\", \"Doe\")\n","\n","\n","vadim.consume_vacation(7)\n","print(vadim.get_vacation_details())\n","\n","vadim.consume_vacation(14)\n","print(vadim.get_vacation_details())"],"metadata":{"id":"2TyRY9a1XCOu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732354004682,"user_tz":-300,"elapsed":592,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}},"outputId":"908eb3ef-3706-40ad-93d1-43861604b7cf"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Остаток отпускных дней: 21\n","Остаток отпускных дней: 7\n"]}]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"C0Z_wXo9XIr2"}},{"cell_type":"markdown","source":["Задание:\n","\n","Создайте класс с именем Rectangle который имеет:\n","- Атрибуты ширины и высоты.\n","- Метод расчета площади.\n","- Метод расчета периметра.\n","- Метод отображения размеров прямоугольника.\n","\n","Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."],"metadata":{"id":"jQ4qqd8nEZBY"}},{"cell_type":"code","source":["class Rectangle:\n","    def __init__(self, width, height):\n","        self.width = width\n","        self.height = height\n","\n","\n","    def calculate_area(self):\n","        return self.width * self.height\n","\n","\n","    def calculate_perimeter(self):\n","        return 2 * (self.width + self.height)\n","\n","\n","    def display_dimensions(self):\n","        print(\"ширина:\", self.width)\n","        print(\"длинна:\", self.height)\n","\n","\n","rectangle = Rectangle(5, 7)\n","\n","\n","print(\"Площадь:\", rectangle.calculate_area())\n","print(\"Периметр:\", rectangle.calculate_perimeter())\n","rectangle.display_dimensions()"],"metadata":{"id":"dG6uNPqTEAvt","executionInfo":{"status":"ok","timestamp":1732352552312,"user_tz":-300,"elapsed":586,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}},"outputId":"70206bce-9aec-4f1c-cec0-d8c81739b184","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Площадь: 35\n","Периметр: 24\n","ширина: 5\n","длинна: 7\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"0ct1u6lqE73j"}},{"cell_type":"markdown","source":["Задание: Создайте мини версию банковской системы:\n","\n","\n","Инструкции:\n","\n","1. Создайте класс BankAccountсо следующими атрибутами:\n","    - account_holder -  владелец счета\n","    - balance - баланс счета\n","\n","2. Реализуйте следующие методы:\n","    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n","    - deposit(amount): Добавьте указанную сумму к балансу.\n","    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n","    - get_balance(): Возврат текущего баланса.\n","\n","\n","Создайте объект класса и продемонстрируйте его возможности"],"metadata":{"id":"FOpIpcLxE-WK"}},{"cell_type":"code","source":["class BankAccount:\n","    def __init__(self, account_holder):\n","        self.account_holder = account_holder\n","        self.balance = 0\n","\n","\n","    def deposit(self, amount):\n","        if amount > 0:\n","            self.balance += amount\n","        else:\n","            raise ValueError(\"Сумма депозита должна быть больше нуля.\")\n","\n","\n","    def withdraw(self, amount):\n","        if amount <= self.balance:\n","            self.balance -= amount\n","        else:\n","            print(\"Недостаточно средств для снятия.\")\n","\n","\n","    def get_balance(self):\n","        return self.balance\n","\n","\n","acc = BankAccount(\"Вася\")\n","\n","\n","acc.deposit(100)\n","acc.withdraw(50)\n","print(\"Баланс:\", acc.get_balance())"],"metadata":{"id":"WWXNIUrCE99W"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"C5DX5Uf2FfP6"}},{"cell_type":"markdown","source":["Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"],"metadata":{"id":"0cR-MYepFgz6"}},{"cell_type":"code","source":["import random\n","\n","class Knight:\n","    def __init__(self, name, armor, weapon, damage, health):\n","        self.name = name\n","        self.armor = armor\n","        self.weapon = weapon\n","        self.damage = damage\n","        self.health = health\n","\n","    def attack(self, enemy):\n","        # Случайный урон в диапазоне от -2 до +2\n","        actual_damage = random.randint(self.damage - 2, self.damage + 2)\n","        effective_damage = max(0, actual_damage - enemy.armor)\n","        enemy.health -= effective_damage\n","        print(f\"{self.name} наносит {effective_damge} урона по {enemy.name}! Осталось здоровья: {enemy.health}\")\n","\n","    def is_alive(self):\n","        return self.health > 0\n","\n","\n","class Dragon:\n","    def __init__(self, name, armor, damage, health):\n","        self.name = name\n","        self.armor = armor\n","        self.damage = damage\n","        self.health = health\n","\n","    def attack(self, enemy):\n","        # Случайный урон в диапазоне от -2 до +2\n","        actual_damage = random.randint(self.damage - 2, self.damage + 2)\n","        effective_damage = max(0, actual_damage - enemy.armor)\n","        enemy.health -= effective_damage\n","        print(f\"{self.name} наносит {effective_damage} урона по {enemy.name}! Осталось здоровья: {enemy.health}\")\n","\n","    def is_alive(self):\n","        return self.health > 0\n","\n","\n","def battle(knight, dragon):\n","    print(f\"\\n{knight.name} сражается с {dragon.name}!\")\n","    while knight.is_alive() and dragon.is_alive():\n","        knight.attack(dragon)\n","        if dragon.is_alive():\n","            dragon.attack(knight)\n","        print()\n","\n","    if knight.is_alive():\n","        print(f\"{knight.name} победил {dragon.name}!\")\n","    else:\n","        print(f\"{dragon.name} победил {knight.name}!\")\n","\n","\n","def main():\n","    print(\"Добро пожаловать в игру 'Рыцарь и Дракон'!\")\n","    print('В королевстве Лунария настали тревожные времена. Древний дракон')\n","    print('Charmander, пробудившись от долгого сна на горе Pokeland, начал опустошать')\n","    print('окрестные деревни своим огненным дыханием. Люди в панике бегут из своих домов.')\n","    print('Король Лунарии объявляет награду тому, кто сможет остановить Charmander и вернуть мир')\n","    print('в королевство. Вы, смелый рыцарь, решаете принять вызов. Собрав свои доспехи и оружие, ')\n","    print('вы отправляетесь в опасное путешествие к горе Pokeland.')\n","    print('Смелость и решительность будут вашими лучшими союзниками в этой битве.')\n","    print('Готовьтесь, рыцарь, ваша судьба и судьба королевства теперь в ваших руках!')\n","\n","    knight = Knight(input(\"Введите имя рыцаря: \"),\n","                     int(input(\"Введите уровень доспехов (0-5): \")),\n","                     input(\"Введите название оружия: \"),\n","                     int(input(\"Введите урон от оружия (5-15): \")),\n","                     int(input(\"Введите здоровье (20-100): \")))\n","\n","    dragon = Dragon(\"Дракон\", random.randint(0, 3), random.randint(10, 20), random.randint(50, 100))\n","\n","    battle(knight, dragon)\n","\n","\n","\n","main()"],"metadata":{"id":"Oz9BZbhAFwua"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительное задание\n"],"metadata":{"id":"b_mJHXcQGI9t"}},{"cell_type":"markdown","source":["Задача: Система управления библиотекой\n","\n","**Цель**\n","Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n","\n","**Требования**\n","\n","1. **Определение класса**:\n","   – Создайте класс с именем «Book» со следующими атрибутами:\n","     - `title`\n","     - `автор`\n","     - `isbn`\n","     - `is_borrowed` (по умолчанию `False`)\n","\n","2. **Класс библиотеки**:\n","   - Создайте класс с именем Library, который управляет коллекцией книг.\n","   - Класс должен иметь следующие методы:\n","     - `__init__(self)`: инициализирует пустой список книг.\n","     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n","     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n","     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n","     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n","     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n","\n","3. **Взаимодействие с пользователем**:\n","   - Создайте простое текстовое меню, которое позволит пользователям:\n","     - Добавить книгу\n","     - Одолжить книгу\n","     - Вернуть книгу\n","     - Список доступных книг\n","     - Выйти из программы"],"metadata":{"id":"pnIUdFPcGOVL"}},{"cell_type":"code","source":["class Book:\n","    def __init__(self, title, author, isbn, is_borrowed=False):\n","        self.title = title\n","        self.author = author\n","        self.isbn = isbn\n","        self.is_borrowed = is_borrowed\n","\n","    def __repr__(self):\n","        return f\"Title: {self.title}, Author: {self.author}, ISBN: {self.isbn}\"\n","\n","\n","\n","class Library:\n","    def __init__(self):\n","        self.books = []\n","\n","    def add_book(self, book: Book):\n","        self.books.append(book)\n","        print(f\"Добавлена книга: {book}\")\n","\n","\n","\n","\n","\n","\n","\n","def main():\n","\n","    while True:\n","        print(\"\\nMENU:\")\n","        print(\"1. Добавить книгу\")\n","        print(\"2. Одолжить книгу\")\n","        print(\"3. Вернуть книгу\")\n","        print(\"4. Список доступных книг\")\n","        print(\"5. Найти книгу\")\n","        print(\"6. Выйти\")"],"metadata":{"id":"GKKmdfN8GL6f"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ZXOWt9LeqWx0"},"execution_count":null,"outputs":[]}]}