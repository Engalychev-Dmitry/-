{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1bbYGdWi_dKiB0HoLFBXxshe_0yemJtea","timestamp":1729590067319}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"tKNG_RzWxG6g"}},{"cell_type":"markdown","source":["# **Дисклеймер**\n","\n","В данной практике будет введен дополнительный критерий: чистота и читаемость кода, а также соблюдение правил описанных в начале практики"],"metadata":{"id":"cFcrKfclKWh0"}},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"0SnE87X1xDlV"}},{"cell_type":"markdown","source":["# Задание 1\n","\n","**Задача:**\n","\n","Напишите функцию очищающий список от дубликтов\n","\n","\n","*Запрещено:*\n","\n","*   Использовать set() или готовые функции очищающие список от дубликатов\n","\n","Вввод:\n","\n","```\n","apple banana apple 1 3 4 4 5\n","```\n","\n","\n","Вывод:\n","\n","```\n","apple banana 1 3 4 5\n","```\n","\n"],"metadata":{"id":"VxawR9NubT_F"}},{"cell_type":"code","source":["str_ = input('Введите строку : ')\n","word = ''\n","\n","\n","def get_list(str_,word):\n","    list_ = []\n","    if str_[-1] != ' ':\n","        str_ = str_ + ' '\n","    for i in str_:\n","        if i == ' ':\n","            list_.append(word)\n","            word = ''\n","        else:\n","            word += i\n","    return list_\n","\n","\n","new_list = []\n","for word1 in get_list(str_,word):\n","    for word2 in get_list(str_,word):\n","        if word2 in new_list:\n","            continue\n","        if word1 == word2:\n","            new_list.append(word2)\n","\n","new_str = ''\n","for i in new_list:\n","    new_str = new_str + ' ' + i\n","print(new_str)\n","\n","\n",""],"metadata":{"id":"ml5gnbPXbeju","executionInfo":{"status":"ok","timestamp":1729592461354,"user_tz":-300,"elapsed":781,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}}},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":["# Задание 2\n","\n","**Задача:**\n","\n","Написать функцию для нахождения простых чисел в диапазоне\n","\n","Ввод:\n","\n","```\n","10, 50\n","```\n","\n","Вывод:\n","\n","```\n","11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47\n","```"],"metadata":{"id":"y05x0eD0cVCC"}},{"cell_type":"code","source":["import math\n","\n","\n","\n","\n","str_ = input('Введите строку : ')\n","str_ = str_.replace(',','')\n","word = ''\n","\n","\n","def get_list_(str_,word):\n","    list_ = []\n","    if str_[-1] != ' ':\n","        str_ = str_ + ' '\n","    for i in str_:\n","        if i == ' ':\n","            list_.append(word)\n","            word = ''\n","        else:\n","            word += i\n","    return list_\n","\n","\n","def dividers(number):\n","    divs = []\n","    for i in range(2, number + 1):\n","        if i ** 2 > number:\n","            break\n","        else:\n","            if number / i == number // i:\n","                divs.append(i)\n","                divs.append(number // i)\n","    return divs\n","\n","\n","prime_numbers = []\n","for i in range(int(get_list_(str_,word)[0]), int(get_list_(str_,word)[1]) + 1):\n","    if len(dividers(i)) < 1:\n","      prime_numbers.append(i)\n","\n","\n","new_str = ''\n","for i in prime_numbers:\n","    if i == prime_numbers[0]:\n","        new_str += str(i)\n","    else:\n","        new_str +=', ' + str(i)\n","print(new_str)\n","\n","\n","\n","\n"],"metadata":{"id":"XSMJnLgrc6Bf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1729592720108,"user_tz":-300,"elapsed":4869,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}},"outputId":"bc635dc7-c898-42bb-c2d7-3a543f8d7c36"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите строку : 10, 50\n","['10', '50']\n","11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47\n"]}]},{"cell_type":"markdown","source":["# Задание 3\n","\n","Напишите функцию для объединения двух списков (список ключей и список значении) в словарь\n","\n","*Запрещено:*\n","\n","*   Использования готовых функции для объединения списков (пример: zip() )\n","\n","Дано:\n","\n","```\n","keys = ['a', 'b', 'c', 'e' ]\n","values = [1, 2, 3, 4]\n","```\n","\n","Вывод:\n","```\n","{'a': 1, 'b': 2, 'c': 3, 'e': 4}\n","```\n","\n","\n"],"metadata":{"id":"vYM0LyxxdElN"}},{"cell_type":"code","source":["keys = ['a', 'b', 'c', 'e' ]\n","values = [1, 2, 3, 4]\n","def get_dict(keys,values):\n","    dict_ = {}\n","    for i in range(0,len(keys)):\n","        dict_[keys[i]] = values[i]\n","    return dict_\n","print(get_dict(keys,values))\n","\n","\n","\n"],"metadata":{"id":"CRvhHTjCdvjS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1729593499767,"user_tz":-300,"elapsed":372,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}},"outputId":"e76b9cba-f65c-4430-9d8f-69854355b6aa"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["{'a': 1, 'b': 2, 'c': 3, 'e': 4}\n"]}]},{"cell_type":"markdown","source":["# Задание 4\n","\n","Напишите функцию(ии) для подсчета статистических параметров:\n","*   Сумму\n","*   Среднее арифметическое\n","*   Медиану\n","*   Моду\n","\n","\n","*Запрещено:*\n","\n","*   sum()\n","*   sorted()\n","*   и других функции предоставляющих готовое решение задания\n","\n","Дано:\n","\n","```\n","numbers = [1, 2, 2, 3, 4, 5, 6, 7, 8 ,9 ,10]\n","\n","```\n","\n","Вывод:\n","```\n","{'mean': 5.181818181818182, 'median': 5, 'mode': 2, 'sum': 57}\n","```\n"],"metadata":{"id":"L_w8H8i-fQcP"}},{"cell_type":"code","source":["numbers = [1, 2, 2, 3, 4, 5, 6, 7, 8 ,9 ,10]\n","\n","\n","def operation(numbers):\n","    operations = {}\n","    summ = 0\n","    score = 0\n","    for i in numbers:\n","        summ += i\n","        score += 1\n","    operations['sum'] = summ\n","\n","\n","\n","    means = summ / score\n","    operations['mean'] = means\n","\n","    number_score = {}\n","    new_list = []\n","    for number1 in numbers:\n","        for number2 in numbers:\n","            if number2 in new_list:\n","                continue\n","            if number1 == number2:\n","                new_list.append(number2)\n","    for i in new_list:\n","        number_score[i] = numbers.count(i)\n","    value = max(number_score.values())\n","    for key in number_score:\n","        if number_score[key] == value:\n","            operations['moda'] = key\n","\n","\n","    sort_numbers = []\n","    for i in range(len(numbers)):\n","        sort_numbers.append(min(numbers))\n","        numbers.remove(min(numbers))\n","    if len(sort_numbers) % 2 != 0:\n","        operations['median'] = sort_numbers[(len(sort_numbers) - 1) // 2]\n","    else:\n","        operations['median'] = 'None'\n","    return operations\n","print(operation(numbers))\n","\n","\n","\n","\n","\n",""],"metadata":{"id":"dW6jW_rjfuba","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1729596416306,"user_tz":-300,"elapsed":382,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}},"outputId":"a5496b37-ec39-4817-dd5c-56222a09c121"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["{'sum': 57, 'mean': 5.181818181818182, 'moda': 2, 'median': 5}\n"]}]},{"cell_type":"markdown","source":["# Задание 5\n","\n","На ввод поступает строка символов. Строка состоит из слов, которые отделены друг от друга пробелами. Необходимо вывести самое длинное слово и его порядковый номер.\n","\n","*Запрещено:*\n","\n","*   len()\n","\n","Дано:\n","\n","```\n","Страдание и боль всегда обязательны для широкого сознания и глубокого сердца.\n","\n","```\n","\n","Вывод:\n","```\n","Самое длинное слово с номером 5: обязательны\n","```"],"metadata":{"id":"hZW0NZ7SgTcp"}},{"cell_type":"code","source":["str_ = input('Введите строку : ')\n","str_.replace('.','')\n","word = ''\n","\n","\n","def get_list_(str_,word):\n","    list_ = []\n","    if str_[-1] != ' ':\n","        str_ = str_ + ' '\n","    for i in str_:\n","        if i == ' ':\n","            list_.append(word)\n","            word = ''\n","        else:\n","            word += i\n","    return list_\n","\n","\n","size = []\n","for i in get_list_(str_,word):\n","    score = 0\n","    for f in i:\n","        score += 1\n","    size.append(score)\n","print('Самое длинное слово под номером ' + str(size.index(max(size)) + 1) + ': ' + str(get_list_(str_,word)[size.index(max(size))]))\n","\n"],"metadata":{"id":"rC5DpHHLsDYp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1729597062109,"user_tz":-300,"elapsed":2720,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}},"outputId":"43e46619-7be3-44af-b81a-b8a4e6662f78"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите строку : Страдание и боль всегда обязательны для широкого сознания и глубокого сердца.\n","Самое длинное слово под номером 5: обязательны\n"]}]},{"cell_type":"markdown","source":["# Задание 6\n","\n","Напишите программу, для управления оценками студентов, со следующими функциями:\n","\n","* Добавление информации о студенте и его оценках.\n","* Подсчет среднего балла студента.\n","* Получение списка всех студентов с их средними баллами.\n","* Поиск студента по имени и вывод его оценок и среднего балла.\n","\n","\n","\n"],"metadata":{"id":"k5BzJW5ZeaQN"}},{"cell_type":"code","source":["\n","\n","\n","\n","\n"],"metadata":{"id":"cvhlltVbdyoL","colab":{"base_uri":"https://localhost:8080/","height":443},"executionInfo":{"status":"error","timestamp":1729598665263,"user_tz":-300,"elapsed":11636,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}},"outputId":"4533348c-b6ad-4cf6-b4ee-4cb02b2199ef"},"execution_count":39,"outputs":[{"name":"stdout","output_type":"stream","text":["1\n","Введите имя студента: l\n","Введите информацию о оценках(5 бальная шкала) данного студента без пробелов и знаков препинаний: 123\n","2\n","Введите имя студента:l\n"]},{"output_type":"error","ename":"TypeError","evalue":"int() argument must be a string, a bytes-like object or a real number, not 'list'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-39-0da0bd31e892>\u001b[0m in \u001b[0;36m<cell line: 27>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     25\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'3'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m             \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-39-0da0bd31e892>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     22\u001b[0m             \u001b[0mget_student\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'2'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m             \u001b[0mmeans\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'3'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m             \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-39-0da0bd31e892>\u001b[0m in \u001b[0;36mmeans\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Введено неккоректное имя студента'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m         \u001b[0mmean\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstudent\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstudent\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Средний балл студента {mean}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: int() argument must be a string, a bytes-like object or a real number, not 'list'"]}]},{"cell_type":"markdown","source":["# Задание 7\n","\n","\n","**Задача:**\n","\n","Создайте приложение-викторину с командной строкой, которое задает пользователям вопросы по различным темам и отслеживает их результаты.\n","\n","Ключевые особенности:\n","\n","*   Хранение данных о вопросах и ответах на них, а также баллов за каждый вопрос\n","*   Реализуйте функцию для представления вопросов, принятия ответов пользователей и предоставления обратной связи о том, являются ли ответы правильными или неправильными.\n","*  После завершения викторины отобразите общий балл пользователя из числа ответов на вопросы.\n","*  Реализуйте функцию добавления нового вопроса\n","*  Реализуйте функцию перемешивания вопросов, для отображения случайного вопроса\n"],"metadata":{"id":"iQ8Z-7PYgu1_"}},{"cell_type":"code","source":["\n"],"metadata":{"id":"DhxyYwHwh2V4","colab":{"base_uri":"https://localhost:8080/","height":176},"executionInfo":{"status":"error","timestamp":1729598933054,"user_tz":-300,"elapsed":8,"user":{"displayName":"Дима Енгалычев","userId":"04472464503988043271"}},"outputId":"742c82bb-4279-4ac1-e9c2-fb0417f0cdae"},"execution_count":44,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"int() argument must be a string, a bytes-like object or a real number, not 'list'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-44-0f08430bf057>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'1 2 3'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: int() argument must be a string, a bytes-like object or a real number, not 'list'"]}]}]}